
scalar DateTime

type User {
  githubLogin: ID!,
  name: String!,
  avatar: String,
  postedPhotos: [Photo!]!,
  inPhotos: [Photo!]!
}

type AuthPayload {
  token: String!,
  user: User!
}

enum PhotoCategory {
  SELFIE,
  PORTRAIT,
  ACTION,
  LANDSCAPE,
  GRAPHIC
}

type Photo {
  id: ID!,
  url: String!,
  name: String!,
  category: PhotoCategory!,
  description: String,
  postedBy: User!,
  taggedUsers: [User!]!
  created: DateTime!
}

# Returns totalPhotos and all photos
type Query{
  totalPhotos: Int!,
  allPhotos: [Photo!]!
  totalUsers: Int!
  allUsers: [User!]!
  me: User
}

input PostPhotoInput {
  name: String!,
  category: PhotoCategory = PORTRAIT,
  description: String
}

# Returns a newly created Photo from the Mutation.
type Mutation {
  postPhoto(input: PostPhotoInput): Photo!
  githubAuth(code: String!): AuthPayload!
  addFakeUsers(count: Int = 1): [User!]!
  fakeUserAuth(githubLogin: ID!): AuthPayload!
}
